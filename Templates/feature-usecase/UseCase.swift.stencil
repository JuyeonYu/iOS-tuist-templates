import Foundation

{{ Action }}{{ Name }}

import Foundation
import RxSwift

extension {{ Name }}UseCase {
    struct {{ Action }}{{ Name }}Query {
    }
    
    protocol {{ Action }}{{ Name }}: QueryUseCase where Query == {{ Action }}{{ Name }}Query {
        
    }
    
    final class {{ Action }}{{ Name }}UseCase: {{ Name }}UseCase.{{ Action }}{{ Name }} {
        private let repository: {{ Name }}Repository
        
        init(repository: {{ Name }}Repository) {
            self.repository = repository
        }
        
        func execute(_ query: {{ Name }}UseCase.{{ Action }}{{ Name }}Query) -> RxSwift.Completable {
            .empty()
        }
    }
}

extension Container {
    var {{ Action }}{{ Name }}UseCase: Factory<{{ Name }}UseCase.{{ Action }}{{ Name }}UseCase> {
        Factory(self) {
                {{ Name }}UseCase.{{ Action }}{{ Name }}UseCase(repository: self.{{ Name }}Repository.resolve())
        }
    }

}
